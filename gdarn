#!/usr/bin/env python3
### Copyright (C) 2010 Peter Williams <peter_ono@users.sourceforge.net>
###
### This program is free software; you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation; version 2 of the License only.
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.
###
### You should have received a copy of the GNU General Public License
### along with this program; if not, write to the Free Software
### Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

'''GUI interface for the darning patch management system'''

import argparse
import os
import sys

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk

from darning import APP_NAME

_BUG_TRACK_URL = 'http://sourceforge.net/tracker/?group_id=386122&amp;atid=1604800'
_DISCUSSION_GRP = 'darning-discussion@lists.sourceforge.net'
_REPORT_REQUEST_MSG = \
_('''<b>Please report this problem by either:
  submitting a bug report at &lt;{url}&gt;
or:
  e-mailing &lt;{grp}&gt;
and including a copy of the details below this message.

Thank you.</b>
''').format(url=_BUG_TRACK_URL, grp=_DISCUSSION_GRP)

def report_exception(exc_data, parent=None):
    def copy_cb(tview):
        tview.get_buffer().copy_clipboard(Gtk.clipboard_get())
    import traceback
    msg = ''.join(traceback.format_exception(exc_data[0], exc_data[1], exc_data[2]))
    dialog = Gtk.Dialog(title=_(APP_NAME + ": Unhandled Exception"),
                        parent=parent, flags=Gtk.DialogFlags.MODAL|Gtk.DialogFlags.DESTROY_WITH_PARENT,
                        buttons=(Gtk.STOCK_CLOSE, Gtk.ResponseType.CLOSE))
    icon = Gtk.Image()
    icon.set_from_stock(Gtk.STOCK_DIALOG_ERROR, Gtk.IconSize.DIALOG)
    vbox = Gtk.VBox()
    vbox.pack_start(icon, expand=False, fill=False, padding=0)
    hbox = Gtk.HBox()
    hbox.pack_start(vbox, expand=False, fill=False, padding=0)
    label = Gtk.Label()
    label.set_selectable(True)
    label.set_markup(_REPORT_REQUEST_MSG)
    hbox.pack_start(label, expand=False, fill=False, padding=0)
    dialog.get_content_area().pack_start(hbox, expand=False, fill=False, padding=0)
    sbw = Gtk.ScrolledWindow()
    tview = Gtk.TextView()
    tview.set_editable(False)
    tview.get_buffer().set_text(msg)
    tview.connect('copy-clipboard', copy_cb)
    sbw.add(tview)
    dialog.get_content_area().pack_end(sbw, expand=True, fill=True, padding=0)
    dialog.show_all()
    dialog.set_resizable(True)
    dialog.run()
    dialog.destroy()

try:
    from darning.gui import gdarn
    from darning.gui import ifce
    from darning.gui import config
    from darning.gui import recollect
except Exception:
    report_exception(sys.exc_info())
    sys.exit(3)

PARSER = argparse.ArgumentParser(description=_('GUI to manage stacked patches'))

PARSER.add_argument(
    'playground',
    help=_('Directory where patches are to be managed'),
    metavar=_('dir'),
    nargs='?'
)

ARGS = PARSER.parse_args()

if ARGS.playground:
    try:
        os.chdir(ARGS.playground)
        recollect.set(APP_NAME, "last_wd", ARGS.playground)
    except OSError as msg:
        sys.stderr.write(str(msg) + '\n')
        sys.exit(2)
else:
    last_dir = recollect.get(APP_NAME, "last_pgnd")
    if os.path.isdir(last_dir):
        try:
            os.chdir(last_dir)
        except OSError as msg:
            pass # go back to asking the user where he wants to start
        ARGS.playground = os.getcwd()

result = ifce.init(ARGS.playground is not None)
mw = gdarn.Darning(dir_specified=ARGS.playground is not None)
mw.show()
mw.report_any_problems(result)

open_dialog = None
if not ifce.PM.in_valid_pgnd and ARGS.playground is None:
    last_pgnd = recollect.get(config_data.APP_NAME, "last_pgnd")
    open_dialog = config.PgndOpenDialog(suggestion=last_pgnd)
    if open_dialog.run() == Gtk.ResponseType.OK:
        wspath = open_dialog.get_path()
        if wspath:
            open_dialog.show_busy()
            result = ifce.chdir(wspath)
            open_dialog.unshow_busy()
            open_dialog.report_any_problems(result)
    else:
        sys.exit()
    open_dialog.show_busy()
if open_dialog:
    open_dialog.unshow_busy()
    open_dialog.destroy()

try:
    Gtk.main()
except (SystemExit, KeyboardInterrupt):
    pass
except BaseException:
    report_exception(sys.exc_info(), parent=mw)
    sys.exit(3)
